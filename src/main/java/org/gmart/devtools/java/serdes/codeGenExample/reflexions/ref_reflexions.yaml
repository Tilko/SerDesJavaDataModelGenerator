

#SchemaOrRef: 
#SchemaOrRef: Schema orRef(SchemaRef with $ref("#/components/schemas/{{name}}") <-> OpenApiSpec.components.schemas.name)
#SchemaOrRef: Schema orRef(SchemaRef, id <-> $ref as "#/components/schemas/{id}", in: OpenApiSpec.components.schemas)
#SchemaOrRef: Schema orRef(SchemaRef, schemaRef -> schemaRef.$ref.as("id", "#/components/schemas/{id}") <-> id, in: OpenApiSpec.components.schemas)
#SchemaOrRef: Schema orRef(SchemaRef, (schemaRef <-> id):(schemaRef.$ref) <-> schemaRef.$ref.extract("id", "#/components/schemas/{id}") <-> id, in: OpenApiSpec.components.schemas)
#
# by ("#/components/schemas/{id}", ) -> (schemaRef.$ref.match("#/components/schemas/{id}") <-> id)("#/components/schemas/{id}" <-> id)
#schemaRef.$ref -> "#/components/schemas/{id}" <-> id
#retenu:
SchemaOrRef: Schema orRef(SchemaRef.$ref, "#/components/schemas/$", OpenApiSpec.components.schemas)
#ref only:
#SchemaOrRef: ref OpenApiSpec.components.schemas
SchemaRef:
  $ref: String
  
  
SchemaOrRef: Schema | SchemaRef
#X: Y | Z  => check suffisant pour valider cette écriture: 
#               vérifier qu'il existe une prop required dans l'un qui n'existe pas dans les autres  
#               algo: for(int i = 0; i < types.size()-1; i++)
#                        type_i = types.get(i);
#                        for(int j = i+1; j < types.size(); j++)
#                           if(check(type_i, types.get(j)))
#                              break;
#                       pas tout à fait, il ne faut pas checker le dernier seulement 
#                       si un des type n'avait pas de champ required, et si 2 types sans champ required => erreur 
SchemaRef:
  $ref: ref(OpenApiSpec.Components.schemas, "#/components/schemas/$")  

#retenu2:
SchemaRef:
  $ref: Ref<Schema>("#/components/schemas/$")  

SchemaOrRef: Schema.orRef($ref, "#/components/schemas/$")

SchemaOrRef: Schema.orRef(SchemaRef,$ref, "#/components/schemas/$")
SchemaRef:
  $ref: String  
#ref only:
#SchemaOrRef: ref OpenApiSpec.components.schemas

  
SchemaOrRef: Schema orRef(SchemaRef, "#/components/schemas/$")
#X: Y | Z  => check suffisant pour valider cette écriture: 
#               vérifier qu'il existe une prop required dans l'un qui n'existe pas dans les autres  
#               algo: for(int i = 0; i < types.size()-1; i++)
#                        type_i = types.get(i);
#                        for(int j = i+1; j < types.size(); j++)
#                           if(check(type_i, types.get(j)))
#                              break;
#                       pas tout à fait, il ne faut pas checker le dernier seulement 
#                       si un des type n'avait pas de champ required, et si 2 types sans champ required => erreur 


#ref only:
#SchemaOrRef: ref OpenApiSpec.components.schemas
SchemaRef:
  $ref: ref(schemaRepo, )  
