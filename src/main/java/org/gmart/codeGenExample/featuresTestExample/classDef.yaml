rootPackage: org.gmart.codeGenExample.featuresTestExample
.:
  stubbed Person:
    name?: String
    vehicle: Vehicle
    #vehicle: int #to test duplicate keys ...
    with: int
    preferredNumbers: int**
    with: long
    here: boolean
    preferredCardType: CardType
    httpMethods: Map<HttpMethodTypes, String*> #Map<String, Map<CardType, Vehicle**>*>*
    components: Components
    bidule0: bidulePackage.Bidule
    bla: TypeWithAUniqueSimpleNameInThisPackagesSet
    obj: Object
    obj2: Object
    states:  Dict<Transition(states.?, here)*>
    states1:  Dict<Transition1(states1.?.?.condition)*>
    states2: Dict<Transition2(states2)*>
    states3: Dict<Dict<Transition3(states3)*>>
    states4: Dict<Dict<Transition4(states4.?.?)*>>
    states5: Dict<Dict<Transition5(states5.?)*>>
    oneOfAndAccessorTest: A(states.?)
    forThisTest: MyThisTestType(this)
    forMonoRefableTest: keysFor(here)
  
  Transition(Accessor<String, Transition*> states, Accessor<Boolean> forMonoRefableTest):
    condition: String
    target: keysFor(states)
    forMonoRefableTest2: keysFor(forMonoRefableTest)
  Transition1(Accessor<String, Integer, String> condition):
    condition: String
    forTestField: keysFor(condition)
  Transition2(Accessor<Dict<Transition2*>> states):
    condition: String
    target: keysFor(states.?)
  Transition3(Accessor<Dict<Dict<Transition3*>>> states):
    condition: String
    target: keysFor(states.?.?)
  Transition4(Accessor<String, String, Transition4*> states):
    condition: String
    target: keysFor(states)
  Transition5(Accessor<String, Dict<Transition5*>> states):
    condition: String
    target: keysFor(states.?)
  A(Accessor<String, Transition*> states): oneOf(int*, keysFor(states)) 
  MyThisTestType(Accessor<Person> a):
    a: keysFor(a.states.?)
  
  Components:
    schemas: Dict<Schema>
    
  stubbed SchemaOrRef: oneOf(Schema, SchemaRef) #(SchemaOrRefImpl)   #[SchemaPartTemp.makeSchemaRefResolver]
  SchemaRef:
    $ref: String
  stubbed Schema:
    type: abstract enum(object, integer)
    truc: int
  #SchemaType: object, integer
  
  ObjectSchema is Schema:
    type: enum(object)
    machin: int
  IntSchema is Schema:
    type: enum(integer)
    bidule: String
    
  
  Vehicle:
    wheelCard: int
    fuel: String
    schema: SchemaOrRef
    
  CardType: Club, Diamond, Heart, Spade, int
  
  HttpMethodTypes: POST, PUT, GET

.bidulePackage:
# as bidulePackage1:
  TypeWithAUniqueSimpleNameInThisPackagesSet:
    b: String
  Bidule:
    a: String
    
.bidulePackage2:
  Bidule:
    a: String